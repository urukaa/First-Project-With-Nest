// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TALENT
  RESELLER
}

enum StatusRegistration {
  PENDING
  ACCEPT
  DECLINE
}

enum Sexs {
  MALE
  FEMALE
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  email    String @unique @db.VarChar(100)
  username String @unique @db.VarChar(100)
  password String @db.VarChar(100)
  role     Role   @default(USER)
  
  reseller Reseller?
  talent Talent?
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @db.VarChar(255)
  expiredAt DateTime
  createdAt DateTime @default(now())
}

model Reseller {
  id        Int      @id @default(autoincrement())
  phone     String   @db.VarChar(15)
  status    StatusRegistration   @default(PENDING)
  user_id   Int   @unique

  user User @relation(fields: [user_id], references: [id])
}

model LivePlatform{
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(50)
  coin_type         String   @db.VarChar(20)
  price_per_coin    Int

  talent Talent[]
}

model Talent {
  id                        Int       @id @default(autoincrement())
  name                      String    @db.VarChar(100)
  sexs                      Sexs      
  streaming_id              String    @db.VarChar(100)
  birth_date                DateTime
  phone                     String    @db.VarChar(15)
  tiktok_username           String    @db.VarChar(100)
  instagram_username        String    @db.VarChar(100)
  host_location             String    @db.VarChar(100)
  smartphone_used           String    @db.VarChar(100)
  referred_by               String    @db.VarChar(100)
  has_live_experience       String    @db.VarChar(100)
  photo_closeup             String    @db.VarChar(255)
  photo_fullbody            String    @db.VarChar(255)
  photo_idcard              String    @db.VarChar(255)
  app_profile_screenshot    String    @db.VarChar(255)
  introduction_video        String    @db.VarChar(255)
  photo_display             String?    @db.VarChar(255)
  status       StatusRegistration     @default(PENDING)
  user_id                 Int         @unique
  live_platform_id        Int

  user User @relation(fields: [user_id], references: [id])
  livePlatform LivePlatform @relation(fields: [live_platform_id], references: [id])
}